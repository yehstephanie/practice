public class Tree(){
    
    Node root;
    
    public Tree(){
        root = new Node();
    }
    
    public Tree(Node rootNode){
        root = rootNode;
    }
    
    public void createTree(){

        int [] ordered = {2,3,4,5,6,7,8,9};
        int [] duplicates = {2, 7, 8, 33, 4, 9, 2, 8, 6};
        for(int num : ordered){

            add(num, root);
        }
    }

    public void add(int toAdd, Node startPt){

        Node current = startPt;
        Node newNode = new Node(toAdd);

        if(toAdd <= current.value && current.left != null){
            current = current.left;
        }
        else{
            current.left = newNode;
            return;
        }
        if(current.right != null){
            current = current.right;
        }
        else{
            current.right = newNode;
            return;
        }
        add(toAdd, current);

    }

    public void inOrderTraversal(Node current, int value){
        Node curr = current;
        
        if(node.left != null){
            inOrderTraversal(curr.left);
        }
        else{
            if(curr.value == value){
                return curr;
            }
            if(curr.right != null){
                inOrderTraversal(curr.right);
            }
        }   
               
    }
    
    public void postOrderTraversal(){
    
    }
    
    public void preOrderTraversal(){
    
    }
        
}